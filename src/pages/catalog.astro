---
// src/pages/catalog.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import CatalogFilters from '../components/catalog/CatalogFilters.astro';
import StoresList from '../components/catalog/StoresList.astro';
import { groupProductsByStore } from '../utils/filters';
import { productos, tiendas } from '../data/productos';

// Obtener parámetros de la URL
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;
const searchTerm = searchParams.get('q')?.toLowerCase() || '';
const categoriasSeleccionadas = searchParams.get('categorias')?.split(',').filter(Boolean) || [];

// Función para filtrar tiendas según los criterios de búsqueda y categorías
function filtrarTiendas(tiendas: any[], search: string, categorias: string[]) {
  return tiendas.filter(tienda => {
    // Filtrar por categorías si hay alguna seleccionada
    const cumpleCategorias = categorias.length === 0 || 
      tienda.categorias.some((cat: string) => categorias.includes(cat));
    
    // Filtrar por término de búsqueda
    const cumpleBusqueda = !search || 
      tienda.nombre.toLowerCase().includes(search) || 
      tienda.descripcion.toLowerCase().includes(search);
    
    return cumpleCategorias && cumpleBusqueda;
  });
}

// Filtrar tiendas según los parámetros actuales
const tiendasFiltradas = filtrarTiendas(tiendas, searchTerm, categoriasSeleccionadas);

// Agrupar productos por tienda
const tiendasConProductos = groupProductsByStore(tiendasFiltradas, productos);

// Verificar si hay productos en cada tienda
const tiendasVisibles = tiendasConProductos.filter(tienda => tienda.productos.length > 0);

// Obtener todas las categorías únicas para los filtros
const categoriasUnicas = Array.from(
  new Set(tiendas.flatMap(tienda => tienda.categorias))
).sort();
---

<BaseLayout title="Catálogo | Hilo Mágico" description="Explora nuestra colección de productos únicos y personalizados">
  <main class="catalog-page">
    <div class="container">
      <h1 class="page-title">Catálogo de Productos</h1>
      
      <div class="catalog-layout">
        <!-- Componente de Filtros -->
        <CatalogFilters 
          categorias={categoriasUnicas} 
          initialCategorias={categoriasSeleccionadas}
          initialSearchTerm={searchTerm}
        />
        
        <!-- Contenedor para la lista de tiendas (se actualizará dinámicamente) -->
        <div id="tiendas-container">
          <StoresList tiendas={tiendasVisibles} />
        </div>
      </div>
    </div>
  </main>

  <!-- Script para manejar la actualización dinámica de la lista de tiendas -->
  <script>
    // Función para actualizar la lista de tiendas
    async function actualizarTiendas() {
      const searchParams = new URLSearchParams(window.location.search);
      const searchTerm = searchParams.get('q') || '';
      const categorias = searchParams.get('categorias') ? searchParams.get('categorias')?.split(',').filter(Boolean) : [];
      
      // Mostrar indicador de carga
      const container = document.getElementById('tiendas-container');
      if (container) {
        container.innerHTML = '<div class="loading">Cargando...</div>';
      }
      
      try {
        // Realizar una nueva solicitud al servidor con los parámetros actuales
        const response = await fetch(`${window.location.pathname}?fragment=1&${searchParams.toString()}`);
        const html = await response.text();
        
        // Actualizar solo el contenido del contenedor de tiendas
        if (container) {
          container.innerHTML = html;
        }
      } catch (error) {
        console.error('Error al cargar las tiendas:', error);
        if (container) {
          container.innerHTML = '<div class="error">Error al cargar las tiendas. Inténtalo de nuevo más tarde.</div>';
        }
      }
    }
    
    // Escuchar cambios en los filtros
    document.addEventListener('filtrosCambiados', actualizarTiendas);
    
    // Manejar el botón de retroceso/avance del navegador
    window.addEventListener('popstate', actualizarTiendas);
  </script>
  
  <script>
    // Scripts específicos del catálogo
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Catálogo cargado');
      // Aquí puedes agregar cualquier inicialización específica del catálogo
    });
  </script>
</BaseLayout>
