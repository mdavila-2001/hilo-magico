---
// src/pages/catalogo.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ProductoCard from '../components/ProductoCard.astro';
import { productos } from '../data/productos';

// Título y descripción para SEO
const titulo = 'Catálogo de Productos | Hilo Mágico';
const descripcion = 'Descubre nuestra colección de prendas únicas y personalizadas. Encuentra el estilo perfecto para ti.';

// Obtener categorías únicas para los filtros
const categorias = [...new Set(productos.map(producto => producto.categoria))];
---

<BaseLayout title={titulo} description={descripcion}>
  <Header />
  
  <main class="catalogo">
    <section class="catalogo__hero">
      <div class="contenedor">
        <h1 class="catalogo__titulo">Nuestro Catálogo</h1>
        <p class="catalogo__subtitulo">Descubre nuestras prendas únicas y personalizadas</p>
      </div>
    </section>
    
    <div class="contenedor">
      <div class="catalogo__contenido">
        <!-- Filtros de categoría -->
        <aside class="catalogo__filtros">
          <div class="catalogo__filtros-contenedor">
            <h2 class="catalogo__filtros-titulo">Categorías</h2>
            <div class="catalogo__filtros-opciones">
              <button class="catalogo__filtro activo" data-categoria="todos">
                <span>Todos los productos</span>
                <span class="catalogo__filtro-contador">{productos.length}</span>
              </button>
              
              {categorias.map(categoria => {
                const cantidad = productos.filter(p => p.categoria === categoria).length;
                return (
                  <button class="catalogo__filtro" data-categoria={categoria.toLowerCase().replace(/\s+/g, '-')}>
                    <span>{categoria}</span>
                    <span class="catalogo__filtro-contador">{cantidad}</span>
                  </button>
                );
              })}
            </div>
          </div>
        </aside>
        
        <!-- Lista de productos -->
        <div class="catalogo__productos">
          {productos.map(producto => (
            <ProductoCard producto={producto} />
          ))}
        </div>
      </div>
    </div>
  </main>
  
  <Footer />
  
  <!-- Script para el filtrado de productos -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Asegurarse de que TypeScript sepa que estamos en el navegador
      const botonesFiltro = document.querySelectorAll<HTMLButtonElement>('.catalogo__filtro');
      const productos = document.querySelectorAll<HTMLElement>('.producto');
      
      botonesFiltro.forEach((boton) => {
        boton.addEventListener('click', () => {
          // Remover clase activa de todos los botones
          botonesFiltro.forEach(btn => btn.classList.remove('activo'));
          // Agregar clase activa al botón clickeado
          boton.classList.add('activo');
          
          const categoria = boton.getAttribute('data-categoria');
          
          // Filtrar productos
          productos.forEach((producto) => {
            const productoCategoria = producto.querySelector<HTMLElement>('.producto__categoria');
            if (!productoCategoria) return;
            
            const categoriaProducto = productoCategoria.textContent?.toLowerCase() || '';
            const categoriaNormalizada = categoriaProducto.replace(/\s+/g, '-');
            
            const elemento = producto as HTMLElement;
            if (categoria === 'todos' || categoria === categoriaNormalizada) {
              elemento.style.display = 'block';
            } else {
              elemento.style.display = 'none';
            }
          });
        });
      });
      
      // Agregar productos al carrito
      document.querySelectorAll<HTMLButtonElement>('.producto__carrito').forEach((boton) => {
        boton.addEventListener('click', (e) => {
          e.preventDefault();
          const id = boton.getAttribute('data-id');
          const productoElement = boton.closest<HTMLElement>('.producto');
          
          if (!id || !productoElement) return;
          
          const nombreElement = productoElement.querySelector<HTMLElement>('.producto__nombre');
          const precioElement = productoElement.querySelector<HTMLElement>('.producto__precio');
          const imagenElement = productoElement.querySelector<HTMLImageElement>('.producto__imagen');
          
          if (!nombreElement || !precioElement || !imagenElement) return;
          
          const producto = {
            id: id,
            nombre: nombreElement.textContent || '',
            precio: parseFloat(precioElement.textContent?.replace(/[^0-9.,]+/g, '').replace(',', '.') || '0'),
            imagen: imagenElement.src,
            cantidad: 1
          };
          
          // Usar el carrito global si está disponible
          if (window.carrito) {
            window.carrito.agregarProducto(producto);
          } else {
            console.log('Carrito no está disponible aún', producto);
          }
        });
      });
    });
    
    // Extender la interfaz Window para incluir el carrito
    interface Window {
      carrito?: any; // Podríamos definir una interfaz más específica para el carrito
    }
  </script>
</BaseLayout>

<style>
  /* Estilos para la página de catálogo */
  .catalogo {
    padding-top: 70px; /* Para compensar el header fijo */
  }
  
  .catalogo__hero {
    background-color: $color-lavanda;
    color: $color-violeta-oscuro;
    padding: 3rem 0;
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .catalogo__titulo {
    font-family: $fuente-titulos;
    font-size: 2.5rem;
    margin: 0 0 0.5rem 0;
  }
  
  .catalogo__subtitulo {
    font-size: 1.2rem;
    margin: 0;
    opacity: 0.9;
  }
  
  .catalogo__contenido {
    display: flex;
    gap: 2rem;
    padding: 2rem 0;
  }
  
  .catalogo__filtros {
    flex: 0 0 250px;
  }
  
  .catalogo__filtros-contenedor {
    background: white;
    border-radius: $radio-borde;
    padding: 1.5rem;
    box-shadow: $sombra-suave;
    position: sticky;
    top: 90px; /* Para que quede fijo al hacer scroll */
  }
  
  .catalogo__filtros-titulo {
    font-family: $fuente-secundaria;
    color: $color-violeta-oscuro;
    margin-top: 0;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid $color-gris-claro;
  }
  
  .catalogo__filtros-opciones {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .catalogo__filtro {
    background: none;
    border: none;
    text-align: left;
    padding: 0.75rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.2s ease;
    font-family: $fuente-principal;
    color: $color-gris-oscuro;
    
    &:hover {
      background-color: rgba($color-lavanda, 0.2);
      color: $color-violeta-oscuro;
    }
    
    &.activo {
      background-color: $color-lavanda;
      color: $color-violeta-oscuro;
      font-weight: 600;
    }
  }
  
  .catalogo__filtro-contador {
    background-color: rgba($color-violeta-oscuro, 0.1);
    color: $color-violeta-oscuro;
    font-size: 0.8rem;
    padding: 0.2rem 0.5rem;
    border-radius: 10px;
    margin-left: 0.5rem;
  }
  
  .catalogo__productos {
    flex: 1;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }
  
  @media (max-width: $breakpoint-tablet) {
    .catalogo__contenido {
      flex-direction: column;
    }
    
    .catalogo__filtros {
      flex: 0 0 auto;
      margin-bottom: 2rem;
    }
    
    .catalogo__filtros-contenedor {
      position: static;
    }
  }
  
  @media (max-width: $breakpoint-movil) {
    .catalogo__productos {
      grid-template-columns: 1fr;
    }
  }
</style>
