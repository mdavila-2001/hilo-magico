---
// src/pages/profile.astro
import Layout from '../layouts/BaseLayout.astro';

import type { UserRole } from '../utils/roles';

// Datos de ejemplo para la maqueta
const userData = {
  name: 'Juan Pérez',
  email: 'juan.perez@ejemplo.com',
  phone: '+51 999 999 999',
  role: 'user' as UserRole
};
---

<Layout title="Mi Perfil">
  <main class="profile-container">
    <h1 class="profile-title">Mi Perfil</h1>
    
    <form id="profileForm" class="profile-form">
      <div class="form-group">
        <label for="name" class="form-label">Nombre</label>
        <input
          type="text"
          id="name"
          name="name"
          class="form-input"
          value={userData.name}
          required
        />
      </div>
      
      <div class="form-group">
        <label for="email" class="form-label">Correo electrónico</label>
        <input
          type="email"
          id="email"
          name="email"
          class="form-input"
          value={userData.email}
          disabled
        />
      </div>
      
      <div class="form-group">
        <label for="phone" class="form-label">Teléfono</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          class="form-input"
          value={userData.phone}
          placeholder="Ingresa tu número de teléfono"
        />
      </div>
      
      <div class="form-group">
        <label class="form-label">Rol</label>
        <div class="role-badge">
          {userData.role === 'admin' && 'Administrador'}
          {userData.role === 'user' && 'Usuario'}
          {userData.role === 'owner' && 'Dueño'}
          {userData.role === 'seller' && 'Vendedor'}
          {userData.role === 'customer' && 'Cliente'}
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn-save">
          Guardar cambios
        </button>
      </div>
    </form>
  </main>
</Layout>

<script>
  // Función simulada para mostrar mensajes (solo maqueta)
  function showMessage(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
    console.log(`[${type}] ${message}`);
    
    // Crear elemento de mensaje
    const messageDiv = document.createElement('div');
    messageDiv.className = `message message--${type}`;
    messageDiv.textContent = message;
    
    // Insertar antes del formulario
    const form = document.getElementById('profileForm');
    const container = document.querySelector('.profile-container');
    
    if (form && container) {
      container.insertBefore(messageDiv, form);
      
      // Eliminar mensaje después de 5 segundos
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
  }
  
  // Simular envío del formulario
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('profileForm');
    if (form) {
      form.onsubmit = (e: Event) => {
        e.preventDefault();
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement | null;
        
        if (!submitButton) return;
        
        const originalText = submitButton.textContent;
        
        // Simular carga
        submitButton.disabled = true;
        if (originalText) {
          submitButton.textContent = 'Guardando...';
        }
        
        // Simular petición
        setTimeout(() => {
          showMessage('Perfil actualizado correctamente', 'success');
          submitButton.disabled = false;
          if (originalText) {
            submitButton.textContent = originalText;
          }
        }, 1000);
      };
    }
  });
</script>

<style>
  .profile-container {
    max-width: 600px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  
  .profile-title {
    text-align: center;
    color: var(--color-violeta-oscuro);
    margin-bottom: 2rem;
  }
  
  .profile-form {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--color-violeta-oscuro);
    font-weight: 500;
  }
  
  .form-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .form-input:disabled {
    background-color: #f5f5f5;
    cursor: not-allowed;
  }
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 2rem;
  }
  
  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .btn-primary {
    background-color: var(--color-violeta-oscuro);
    color: white;
  }
  
  .btn-primary:hover {
    background-color: darken(var(--color-violeta-oscuro), 10%);
  }
</style>
