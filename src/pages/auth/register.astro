---
// src/pages/auth/register.astro
import AuthLayout from '../../layouts/auth/AuthLayout.astro';
import '../../styles/main.scss';

const pageTitle = 'Crear Cuenta';
---

<AuthLayout title={pageTitle}>
  <header class="auth-header">
    <div class="auth-logo">
      <i class="fas fa-user-plus"></i>
    </div>
    <h1>Únete a Hilo Mágico</h1>
    <p>Crea tu cuenta para comenzar</p>
  </header>
  
  <form id="registerForm" class="auth-form">
    <!-- Mensaje de error/success -->
    <div id="message" class="message hidden">
      <span id="message-text"></span>
    </div>
    
    <!-- Campo de email -->
    <div class="form-group">
      <label for="email">Correo electrónico</label>
      <div class="input-group">
        <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
          <i class="fas fa-envelope"></i>
        </span>
        <input 
          type="email" 
          id="email" 
          name="email" 
          placeholder="tu@email.com" 
          required
          autocomplete="username"
          class="w-full pl-10"
        >
      </div>
      <div class="field-error" id="email-error"></div>
    </div>

    <!-- Campo de contraseña -->
    <div class="form-group">
      <label for="password">Contraseña</label>
      <div class="input-group">
        <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
          <i class="fas fa-lock"></i>
        </span>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required 
          minlength="8"
          placeholder="••••••••"
          autocomplete="new-password"
          class="w-full pl-10"
        >
      </div>
      <div class="field-error" id="password-error"></div>
    </div>

    <!-- Confirmar contraseña -->
    <div class="form-group">
      <label for="confirmPassword">Confirmar Contraseña</label>
      <div class="input-group">
        <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
          <i class="fas fa-lock"></i>
        </span>
        <input 
          type="password" 
          id="confirmPassword" 
          name="confirmPassword" 
          required 
          minlength="8"
          placeholder="••••••••"
          autocomplete="new-password"
          class="w-full pl-10"
        >
      </div>
      <div class="field-error" id="confirm-password-error"></div>
    </div>

    <!-- Nombre y Apellidos -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- Primer Nombre -->
      <div class="form-group">
        <label for="firstName">Primer Nombre</label>
        <div class="input-group">
          <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            <i class="fas fa-user"></i>
          </span>
          <input 
            type="text" 
            id="firstName" 
            name="firstName" 
            required 
            placeholder="Juan"
            autocomplete="given-name"
            class="w-full pl-10"
          >
        </div>
        <div class="field-error" id="first-name-error"></div>
      </div>
      
      <!-- Segundo Nombre -->
      <div class="form-group">
        <label for="middleName">Segundo Nombre</label>
        <div class="input-group">
          <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            <i class="fas fa-user"></i>
          </span>
          <input 
            type="text" 
            id="middleName" 
            name="middleName" 
            placeholder="Carlos"
            autocomplete="additional-name"
            class="w-full pl-10"
          >
        </div>
      </div>
      
      <!-- Apellido Paterno -->
      <div class="form-group">
        <label for="lastName">Apellido Paterno</label>
        <div class="input-group">
          <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            <i class="fas fa-user"></i>
          </span>
          <input 
            type="text" 
            id="lastName" 
            name="lastName" 
            required 
            placeholder="Pérez"
            autocomplete="family-name"
            class="w-full pl-10"
          >
        </div>
        <div class="field-error" id="last-name-error"></div>
      </div>
      
      <!-- Apellido Materno -->
      <div class="form-group">
        <label for="motherLastName">Apellido Materno</label>
        <div class="input-group">
          <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            <i class="fas fa-user"></i>
          </span>
          <input 
            type="text" 
            id="motherLastName" 
            name="motherLastName" 
            placeholder="López"
            class="w-full pl-10"
          >
        </div>
      </div>
    </div>

    <!-- Botón de registro -->
    <div class="form-actions">
      <button type="submit" class="btn btn-primary w-full">
        Crear Cuenta
      </button>
    </div>

    <!-- Enlace a login -->
    <div class="text-center mt-6">
      <p class="text-sm text-gray-600">
        ¿Ya tienes una cuenta? 
        <a href="/auth/login" class="text-violet-800 hover:underline font-medium">
          Inicia sesión
        </a>
      </p>
    </div>
  </form>
</AuthLayout>

<script>
  document.getElementById('registerForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Resetear mensajes de error
    document.querySelectorAll('.field-error').forEach(el => el.textContent = '');
    
    // Obtener referencias a los elementos del formulario con tipado correcto
    const emailInput = document.getElementById('email') as HTMLInputElement | null;
    const passwordInput = document.getElementById('password') as HTMLInputElement | null;
    const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement | null;
    const firstNameInput = document.getElementById('firstName') as HTMLInputElement | null;
    const middleNameInput = document.getElementById('middleName') as HTMLInputElement | null;
    const lastNameInput = document.getElementById('lastName') as HTMLInputElement | null;
    const motherLastNameInput = document.getElementById('motherLastName') as HTMLInputElement | null;
    
    // Verificar que los elementos existen
    if (!emailInput || !passwordInput || !confirmPasswordInput || 
        !firstNameInput || !lastNameInput) {
      console.error('Error: No se encontraron todos los campos del formulario');
      return;
    }
    
    // Obtener valores del formulario
    const formData = {
      email: emailInput.value.trim(),
      password: passwordInput.value,
      confirmPassword: confirmPasswordInput.value,
      first_name: firstNameInput.value.trim(),
      middle_name: middleNameInput?.value.trim() || '',
      last_name: lastNameInput.value.trim(),
      mother_last_name: motherLastNameInput?.value.trim() || ''
    };

    // Validaciones
    let isValid = true;
    
    // Validar email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      const errorEl = document.getElementById('email-error');
      if (errorEl) errorEl.textContent = 'Por favor ingresa un correo electrónico válido';
      isValid = false;
    }
    
    // Validar contraseña
    if (formData.password.length < 8) {
      const errorEl = document.getElementById('password-error');
      if (errorEl) errorEl.textContent = 'La contraseña debe tener al menos 8 caracteres';
      isValid = false;
    }
    
    // Validar que las contraseñas coincidan
    if (formData.password !== formData.confirmPassword) {
      const errorEl = document.getElementById('confirm-password-error');
      if (errorEl) errorEl.textContent = 'Las contraseñas no coinciden';
      isValid = false;
    }
    
    // Validar campos requeridos
    if (!formData.first_name) {
      const errorEl = document.getElementById('first-name-error');
      if (errorEl) errorEl.textContent = 'Este campo es obligatorio';
      isValid = false;
    }
    
    if (!formData.last_name) {
      const errorEl = document.getElementById('last-name-error');
      if (errorEl) errorEl.textContent = 'Este campo es obligatorio';
      isValid = false;
    }
    
    if (!isValid) return;
    
    // Mostrar indicador de carga
    const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement | null;
    const originalButtonHTML = submitButton?.innerHTML || 'Crear Cuenta';
    
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Creando cuenta...';
    }
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
          first_name: formData.first_name,
          middle_name: formData.middle_name,
          last_name: formData.last_name,
          mother_last_name: formData.mother_last_name
        })
      });
      
      const result = await response.json();
      
      if (response.ok) {
        window.location.href = '/auth/login?registered=true';
      } else {
        // Mostrar mensaje de error
        const messageEl = document.getElementById('message');
        const messageTextEl = document.getElementById('message-text');
        if (messageEl && messageTextEl) {
          messageEl.classList.remove('hidden', 'bg-green-100', 'text-green-700');
          messageEl.classList.add('bg-red-100', 'text-red-700');
          messageTextEl.textContent = result.message || 'Error al registrar el usuario';
          messageEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    } catch (error) {
      console.error('Error:', error);
      const messageEl = document.getElementById('message');
      const messageTextEl = document.getElementById('message-text');
      if (messageEl && messageTextEl) {
        messageEl.classList.remove('hidden', 'bg-green-100', 'text-green-700');
        messageEl.classList.add('bg-red-100', 'text-red-700');
        messageTextEl.textContent = 'Error al conectar con el servidor';
        messageEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    } finally {
      // Restaurar el botón
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonHTML;
      }
    }
  });
</script>

<style>
  /* Estilos específicos para la página de registro */
  .auth-header {
    @apply text-center mb-8;
  }
  
  .auth-logo {
    @apply w-16 h-16 mx-auto mb-4 rounded-full bg-violet-100 flex items-center justify-center text-violet-600 text-2xl;
  }
  
  .auth-header h1 {
    @apply text-2xl font-bold text-gray-800 mb-2;
  }
  
  .auth-header p {
    @apply text-gray-600;
  }
  
  .auth-form {
    @apply space-y-6;
  }
  
  .form-group {
    @apply space-y-1;
  }
  
  .form-group label {
    @apply block text-sm font-medium text-gray-700;
  }
  
  .input-group {
    @apply relative rounded-md shadow-sm;
  }
  
  .form-control {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-violet-500 focus:ring-violet-500 sm:text-sm h-10 px-3 border;
  }
  
  .btn {
    @apply inline-flex items-center justify-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;
  }
  
  .btn-primary {
    @apply bg-violet-600 hover:bg-violet-700 focus:ring-violet-500;
  }
  
  .field-error {
    @apply text-red-600 text-xs mt-1 h-4;
  }
  
  .message {
    @apply p-3 rounded-md text-sm mb-4;
  }
  
  .message.hidden {
    @apply hidden;
  }
  
  .bg-red-100.text-red-700 {
    @apply bg-red-100 text-red-700;
  }
  
  .bg-green-100.text-green-700 {
    @apply bg-green-100 text-green-700;
  }
  
  .fa-spinner.fa-spin {
    animation: fa-spin 1s infinite linear;
  }
  
  @keyframes fa-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>
