---
// Componente de burbuja de chat flotante con modal
import { sendChatMessage, createMessageElement, createTypingIndicator } from '../utils/chat';

---

<div class="chat-container">
  <div class="chat-bubble" id="chatBubble">
    <i class="fas fa-comment-dots"></i>
  </div>
  
  <div class="chat-modal" id="chatModal">
    <div class="chat-modal-content">
      <div class="chat-header">
        <h3>Hola, ¿en qué puedo ayudarte?</h3>
        <button class="close-chat">&times;</button>
      </div>
      <div class="chat-messages" id="chatMessages">
        <!-- Mensajes aparecerán aquí -->
      </div>
      <div class="chat-input-container">
        <input type="text" id="userInput" placeholder="Escribe tu mensaje..." />
        <button id="sendMessage">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Elementos del DOM
  const chatBubble = document.getElementById('chatBubble');
  const chatModal = document.getElementById('chatModal');
  const closeChat = document.querySelector('.close-chat');
  const chatMessages = document.getElementById('chatMessages');
  const userInput = document.getElementById('userInput') as HTMLInputElement;
  const sendButton = document.getElementById('sendMessage');
  
  // Abrir/cerrar el chat
  chatBubble?.addEventListener('click', () => {
    chatModal?.classList.toggle('active');
  });
  
  closeChat?.addEventListener('click', (e) => {
    e.stopPropagation();
    chatModal?.classList.remove('active');
  });
  
  // Enviar mensaje al presionar Enter
  userInput?.addEventListener('keypress', (e: KeyboardEvent) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
  
  // Enviar mensaje al hacer clic en el botón
  sendButton?.addEventListener('click', sendMessage);
  
  // Función para enviar mensaje
  async function sendMessage(): Promise<void> {
    if (!userInput || !chatMessages) return;
    
    const message = userInput.value.trim();
    if (!message) return;
    
    // Agregar mensaje del usuario al chat
    const userMessage = createMessageElement(message, true);
    chatMessages.appendChild(userMessage);
    userInput.value = '';
    
    // Mostrar indicador de escritura
    const typingIndicator = createTypingIndicator();
    chatMessages.appendChild(typingIndicator);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    try {
      // Enviar mensaje al servidor
      const response = await sendChatMessage(message);
      
      // Eliminar indicador de escritura
      typingIndicator.remove();
      
      // Mostrar respuesta del asistente
      const assistantMessage = createMessageElement(response, false);
      chatMessages.appendChild(assistantMessage);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
    } catch (error) {
      console.error('Error al enviar el mensaje:', error);
      typingIndicator.remove();
      
      const errorMessage = createMessageElement(
        'Lo siento, ha ocurrido un error. Por favor, inténtalo de nuevo.',
        false
      );
      chatMessages.appendChild(errorMessage);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }

</script>
